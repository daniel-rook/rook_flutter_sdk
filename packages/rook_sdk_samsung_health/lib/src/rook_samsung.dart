import 'package:rook_sdk_core/rook_sdk_core.dart';
import 'package:rook_sdk_samsung_health/src/domain/enums/samsung_health_availability.dart';
import 'package:rook_sdk_samsung_health/src/domain/enums/samsung_health_permission.dart';
import 'package:rook_sdk_samsung_health/src/domain/enums/sh_event_sync_type.dart';
import 'package:rook_sdk_samsung_health/src/domain/enums/sh_summary_sync_type.dart';
import 'package:rook_sdk_samsung_health/src/domain/model/samsung_health_permissions_summary.dart';
import 'package:rook_sdk_samsung_health/src/platform/rook_sdk_samsung_health_platform_interface.dart';

class RookSamsung {
  RookSamsung._();

  /// Call this before any other function if you want to see the logs generated by this SDK.
  static Future<void> enableNativeLogs() {
    return RookSdkSamsungHealthPlatform.instance.enableNativeLogs();
  }

  /// Get the current user ID.
  static Future<String?> getUserID() {
    return RookSdkSamsungHealthPlatform.instance.getUserID();
  }

  /// Initializes the sdk using the provided credentials.
  static Future<void> initRook(RookConfiguration configuration) {
    return RookSdkSamsungHealthPlatform.instance.initRook(configuration);
  }

  /// Sets the current user for data upload.
  static Future<void> updateUserID(String userID) {
    return RookSdkSamsungHealthPlatform.instance.updateUserID(userID);
  }

  /// Extract and upload timezone information for the current user.
  ///
  /// **IMPORTANT: This function is already called every time `updateUserID` completes successfully,
  /// in most cases the above behavior is more than enough. Only use this function if you need to update
  /// the timezone information manually.**
  static Future<void> syncUserTimeZone() {
    return RookSdkSamsungHealthPlatform.instance.syncUserTimeZone();
  }

  /// Removes the current user for data upload.
  static Future<void> clearUserID() {
    return RookSdkSamsungHealthPlatform.instance.clearUserID();
  }

  /// Removes the current user from Samsung Health data source,
  /// once removed rook servers won't accept any health data from Samsung Health.
  static Future<void> deleteUserFromRook() {
    return RookSdkSamsungHealthPlatform.instance.deleteUserFromRook();
  }

  /// Check if the Samsung Health APK is installed in this device.
  static Future<SamsungHealthAvailability> checkSamsungHealthAvailability() {
    return RookSdkSamsungHealthPlatform.instance
        .checkSamsungHealthAvailability();
  }

  /// Checks if the provided permissions are granted
  ///
  /// [permissions] - The permissions to check, leave empty for all permissions.
  static Future<bool> checkSamsungHealthPermissions(
    List<SamsungHealthPermission> permissions,
  ) {
    return RookSdkSamsungHealthPlatform.instance
        .checkSamsungHealthPermissions(permissions);
  }

  /// Checks if at least one of the provided permissions is granted
  ///
  /// [permissions] - The permissions to check, leave empty for all permissions.
  static Future<bool> checkSamsungHealthPermissionsPartially(
    List<SamsungHealthPermission> permissions,
  ) {
    return RookSdkSamsungHealthPlatform.instance
        .checkSamsungHealthPermissionsPartially(permissions);
  }

  /// Request the provided permissions
  ///
  /// This method will configure, start and stop it's own activity,
  /// the result will be returned in [requestSamsungHealthPermissionsUpdates].
  ///
  /// [permissions] - The permissions to request, leave empty for all permissions.
  static Future<RequestPermissionsStatus> requestSamsungHealthPermissions(
    List<SamsungHealthPermission> permissions,
  ) {
    return RookSdkSamsungHealthPlatform.instance
        .requestSamsungHealthPermissions(permissions);
  }

  /// Listen to this stream to get updates of a Samsung Health permissions request.
  ///
  /// Example:
  ///
  /// ```dart
  /// // 1.- Create a stream subscription
  /// StreamSubscription<bool>? streamSubscription;
  ///
  /// // 2.- Listen to stream
  /// streamSubscription = RookSamsung.requestSamsungHealthPermissionsUpdates.listen((permissionsSummary) {
  ///   // Updated your UI
  /// });
  ///
  /// // 3.- Request permissions
  /// RookSamsung.requestSamsungHealthPermissions().then((requestPermissionsStatus) {
  ///   if (requestPermissionsStatus == RequestPermissionsStatus.alreadyGranted) {
  ///     // Permissions already granted, update your UI
  ///   } else {
  ///     // Wait for result in stream
  ///   }
  ///  }).catchError((error) {
  ///   // Handle error
  ///  });
  ///
  /// // 4.- Stop listening to the stream
  /// streamSubscription?.cancel();
  /// ```
  static Stream<SamsungHealthPermissionsSummary>
      get requestSamsungHealthPermissionsUpdates {
    return RookSdkSamsungHealthPlatform
        .instance.requestSamsungHealthPermissionsUpdates;
  }

  /// Syncs summaries using the provided parameters.
  ///
  /// If [enableLogs] is not null: Syncs the last 29 days of SLEEP_SUMMARY, PHYSICAL_SUMMARY and BODY_SUMMARY (not including today).
  /// If [date] is not null: Syncs SLEEP_SUMMARY, PHYSICAL_SUMMARY and BODY_SUMMARY for the provided [date].
  /// if [summary] and [date] are not null: Syncs the [summary] of choice for the provided [date].
  static Future<bool> sync({
    bool? enableLogs,
    DateTime? date,
    SHSummarySyncType? summary,
  }) {
    if (enableLogs != null) {
      return RookSdkSamsungHealthPlatform.instance.syncHistoricSummaries(
        enableLogs,
      );
    }

    if (date != null) {
      if (summary != null) {
        return RookSdkSamsungHealthPlatform.instance.syncByDateAndSummary(
          date,
          summary,
        );
      } else {
        return RookSdkSamsungHealthPlatform.instance.syncSummariesByDate(
          date,
        );
      }
    }

    throw UnsupportedError('At least one parameter is required');
  }

  /// Syncs the [event] of choice for the provided [date].
  static Future<bool> syncEvents(DateTime date, SHEventSyncType event) {
    return RookSdkSamsungHealthPlatform.instance.syncByDateAndEvent(
      date,
      event,
    );
  }

  /// Retrieve and upload current day steps count of Health Connect.
  ///
  /// Returns a [SHSyncStatusWithData] with the current day steps count (if available).
  static Future<SyncStatusWithData<int>> getTodayStepsCount() {
    return RookSdkSamsungHealthPlatform.instance.getTodayStepsCount();
  }

  /// Retrieve and upload current day calories count of Health Connect.
  ///
  /// Returns a [SHSyncStatusWithData] with the current day calories count (if available).
  static Future<SyncStatusWithData<DailyCalories>> getTodayCaloriesCount() {
    return RookSdkSamsungHealthPlatform.instance.getTodayCaloriesCount();
  }

  /// Checks if background sync is already scheduled.
  static Future<bool> isScheduled() {
    return RookSdkSamsungHealthPlatform.instance.isScheduled();
  }

  /// Listen to this stream to get updates when background sync scheduled state changes.
  ///
  /// Example:
  ///
  /// ```dart
  /// // 1.- Create a stream subscription
  /// StreamSubscription<bool>? streamSubscription;
  ///
  /// // 2.- Listen to stream
  /// streamSubscription = RookSamsung.isScheduledUpdates.listen((isScheduled) {
  ///   // Update UI
  /// });
  ///
  /// // 3.- Stop listening to the stream
  /// streamSubscription?.cancel();
  /// ```
  @Deprecated(
    "This element is not in stable state yet. It may be renamed, changed or even removed in a future version.",
  )
  static Stream<bool> get isScheduledUpdates {
    return RookSdkSamsungHealthPlatform.instance.isScheduledUpdates;
  }

  /// Enables the background upload of summaries and events,
  /// before use this method is necessary to add a user id and request permissions.
  ///
  /// * [enableLogs] See the logs generated by this SDK.
  static Future<void> enableBackground({required bool enableNativeLogs}) {
    return RookSdkSamsungHealthPlatform.instance.schedule(enableNativeLogs);
  }

  /// Disables the background upload of summaries and events.
  static Future<void> disableBackground() {
    return RookSdkSamsungHealthPlatform.instance.cancel();
  }
}
